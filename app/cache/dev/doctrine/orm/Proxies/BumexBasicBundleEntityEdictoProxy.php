<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class BumexBasicBundleEntityEdictoProxy extends \Bumex\BasicBundle\Entity\Edicto implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setNumero($numero)
    {
        $this->__load();
        return parent::setNumero($numero);
    }

    public function getNumero()
    {
        $this->__load();
        return parent::getNumero();
    }

    public function setFecha($fecha)
    {
        $this->__load();
        return parent::setFecha($fecha);
    }

    public function getFecha()
    {
        $this->__load();
        return parent::getFecha();
    }

    public function setEnlace($enlace)
    {
        $this->__load();
        return parent::setEnlace($enlace);
    }

    public function setMembrete($membrete)
    {
        $this->__load();
        return parent::setMembrete($membrete);
    }

    public function getMembrete()
    {
        $this->__load();
        return parent::getMembrete();
    }

    public function setSubmembrete($submembrete)
    {
        $this->__load();
        return parent::setSubmembrete($submembrete);
    }

    public function getSubmembrete()
    {
        $this->__load();
        return parent::getSubmembrete();
    }

    public function setEntrada($entrada)
    {
        $this->__load();
        return parent::setEntrada($entrada);
    }

    public function getEntrada()
    {
        $this->__load();
        return parent::getEntrada();
    }

    public function setTexto($texto)
    {
        $this->__load();
        return parent::setTexto($texto);
    }

    public function getTexto()
    {
        $this->__load();
        return parent::getTexto();
    }

    public function getEnlace()
    {
        $this->__load();
        return parent::getEnlace();
    }

    public function addExpediente(\Bumex\BasicBundle\Entity\Expediente $expediente)
    {
        $this->__load();
        return parent::addExpediente($expediente);
    }

    public function getExpediente()
    {
        $this->__load();
        return parent::getExpediente();
    }

    public function getExpedientes()
    {
        $this->__load();
        return parent::getExpedientes();
    }

    public function setControl($control)
    {
        $this->__load();
        return parent::setControl($control);
    }

    public function getControl()
    {
        $this->__load();
        return parent::getControl();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'numero', 'fecha', 'membrete', 'submembrete', 'entrada', 'texto', 'enlace', 'control', 'expedientes');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}