<?php

namespace Bumex\BasicBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\Request;

use Bumex\BasicBundle\Form\FicheroType;
use Bumex\BasicBundle\Entity\Fichero;
use Bumex\BasicBundle\Entity\Edicto;
use Bumex\BasicBundle\Entity\Expediente;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;


class IndexController extends Controller
{
	/**
     * @Route("/index", name="_bumex_index")
     * @Template()
     */
    public function indexAction()
    {
    	$fichero = new Fichero();
		$fichero->setFrmFecha(new \DateTime('yesterday')); // Valor por defecto del campo fecha: ayer
        $form = $this->createForm(new FicheroType(), $fichero);
		
		return $this->render('BumexBasicBundle:Index:index.html.twig', array('form' => $form->createView()));
	}
	
	/**
     * @Route("/expedientes", name="_bumex_expedientes")
     * @Template()
     */
    public function expedientesAction(Request $request)
    {
    	$datos = array();
		
		if ($request->getMethod() == 'POST') {
    			
    		$fichero = new Fichero();
        	$form = $this->createForm(new FicheroType(), $fichero);
			$form->bindRequest($request);
			
			if($form->isValid()) {
				
				// $datos['Fecha de búsqueda'] = $form['frmFecha']->getData()->format('d/m/Y');
// 				
				// $resultados = $this->obtenerEdictos($form['frmFecha']->getData());
				// $datos['Número de edictos encontrados'] = $resultados['edictos'];
				// $datos['Total de expedientes registrados'] = $resultados['expedientes'];
// 				
// 
				// // $this->gestionarFichero($form); // Copia el fichero al directorio creado app/cache/tmp
				// $datos['Número de coincidencias encontradas'] = $this->gestionarDatosFichero($form); // Obtenemos los datos del xls
// 				
				// // $this->gestionarFichero($form, 'borrar'); // Borra el fichero y el directorio app/cache/tmp
				// // Generamos los pdf de los clientes encontrados
				// $this->crearPdfCoincidencias();
				
				// Generamos los pdf de los no clientes
				$this->obtenerTlfNoclientes();
			}
			
		} else {
			// si entras en expedientes mediante URL, sin pasar por index
			return $this->redirect($this->generateUrl('index'));
		}
		
		return array('datos' => $datos);
    }
		
	/**
     * @Route("/historial", name="_bumex_historial")
     * @Template()
     */
    public function historialAction()
    {
        return $this->render('BumexBasicBundle:Index:historial.html.twig', array());
    }
	
	private function gestionarFichero($fichero, $accion = 'guardar') {
		
		$dir = $_SERVER['DOCUMENT_ROOT'] . '/bumex/app/cache/tmp';
		$nombre = $fichero['file']->getData()->getClientOriginalName();
		
		if($accion == 'guardar') {
			mkdir($dir, 0700);
			$fichero['file']->getData()->move($dir, $nombre);
		} elseif ($accion == 'borrar') {
			unlink($dir . "/" . $nombre);
			rmdir($dir);
		}
		
	}
	
	private function gestionarDatosFichero($fichero) {
		$dir = $_SERVER['DOCUMENT_ROOT'] . '/bumex/app/cache/tmp';
		$nombre = $fichero['file']->getData()->getClientOriginalName();
		$resultados = array();
		
		$exelObj = $this->get('xls.load_xls5')->load($dir . "/" . $nombre);
		$sheetData = $exelObj->getActiveSheet()->toArray(null,true,true,true);
		foreach ($sheetData as $tupla) {
			foreach ($tupla as $dato) {
				if($dato) $this->actualizarExpediente($dato);
			}
		}
		
		// print_r($sheetData);
		return count($sheetData);
	}
	
	private function actualizarExpediente($dato) {
		$em = $this->getDoctrine()->getEntityManager();
		$repository = $this->getDoctrine()->getRepository('BumexBasicBundle:Expediente');
		$query = $repository->createQueryBuilder('ex')
	    		->where('ex.nif like :dato OR ex.matricula like :dato')
	    		->setParameter('dato', $dato)
	    		->getQuery();

		$expedientes = $query->getResult();
		
		foreach ($expedientes as $exp) {
			$exp->setCoincidencia(TRUE);
		}
		
		$em->flush();
		
	}
	
	private function obtenerEdictos($fechaBusqueda) {
		$registros = array('edictos' => 0, 'expedientes' => 0);
		$url = 'https://sede.dgt.gob.es/WEB_TTRA_CONSULTA/TablonEdictosPublico.faces';
		$listasProvincias = array();
		// $csfv = $this->obtenerCsfv($url); // Obtiene una de las semillas de búsqueda		
		// Por cada provincia lanzamos una búsqueda; Del 1 al 54 contempla TESTRA
		for ($provincia=12; $provincia <= 12; $provincia++) {
			$algo = 0; 
			$listasProvincias = $this->obtenerListasProvincia($provincia, $fechaBusqueda->format('d-m-Y'), $csfv = 1);
			foreach ($listasProvincias as $valor) {
				$count = $this->obtenerDatosIframe($valor);
				$registros['edictos'] += $count['edictos'];
				$registros['expedientes'] += $count['expedientes'];
			}
		}
		
		return $registros;
	}

	private function obtenerCsfv($url) {
		
		$data = file_get_contents($url);

		$doc = new \DOMDocument();
		$doc->loadHTML($data);
		$xpath = new \DOMXPath($doc);
			
		$input = $xpath->query('//form[@id="dato"]/input[@name="com.sun.faces.VIEW"]');
		
		return $input->item(0)->getAttribute('value');
	}
	
	private function obtenerListasProvincia($provincia, $fechaBusqueda, $csfv, $paginacion = FALSE)
	{
		$url = 'https://sede.dgt.gob.es/WEB_TTRA_CONSULTA/TablonEdictosPublico.faces';
		$lista = array();
		
		/**
		 * TODO Corregir la obtención de csfv
		 */
		$csfv = '';
		
		$inputs = array(
			        'dato:BusInput' => '*',      // $dato
			        'dato:cal1' => $fechaBusqueda,
			        'dato:cal2' => $fechaBusqueda,
			        'dato:selector1' => $provincia,
			        'dato' => 'dato',
			        'dato:_id50' => '',
			        'com.sun.faces.VIEW' => $csfv
			    );
				
		if ($paginacion){
			$inputs['paginacion'] = 'paginacion';
			$inputs['paginacion:siguiente'] = "";
		}
		
		
		$postdata = http_build_query($inputs);
		
		$opts = array('http' =>
		    array(
		        'method'  => 'POST',
		        'header'  => 'Content-type: application/x-www-form-urlencoded',
		        'content' => $postdata
		    )
		);
		
		$context = stream_context_create($opts);
						
		$data = file_get_contents($url, false, $context);

		$doc = new \DOMDocument();
		$doc->loadHTML($data);
		$xpath = new \DOMXPath($doc);
		
		$listado = $xpath->query('//ul[@class="capaUL"]');
		
		foreach($listado as $edicto) {
			if($this->comprobarVigencia($edicto, $xpath)) {
				$lista[] = $this->obtenerHref($edicto, $xpath);
			}
		}
		
		$siguiente = $xpath->query('//input[@name="paginacion:siguiente"]');
		
		if($siguiente->length > 0){
			$merge = $this->obtenerListasProvincia($provincia, $fechaBusqueda, $csfv, TRUE);
			$lista = array_merge($lista, $merge);
		}
		 
		return $lista;
	}
	
	public function comprobarVigencia($edicto, $xpath) {

		$vigencia = $xpath->query($edicto->getNodePath().'/li/div[@class="floatLeft tamanoEstadoCaracter"]');
		return (strpos($vigencia->item(0)->nodeValue, 'No vigente') === FALSE) ? TRUE : FALSE;
	}
	
	public function obtenerHref($edicto, $xpath) {
		$href = $xpath->query($edicto->getNodePath() . '/li[@class="estiloCabeceraEdicto"]/a');
		return $href->item(0)->getAttribute('href');
	}
	
	private function obtenerDatosIframe($pagina) {
		
		$count = array('edictos' => 0, 'expedientes' => 0);
		
		$url = $this->obtenerSrcIframe($pagina);
		
		$data = file_get_contents('https://sede.dgt.gob.es' . $url);
		
		$doc = new \DOMDocument();
		$doc->loadHTML($data);
		$xpath = new \DOMXPath($doc);
		$codEdicto = $this->obtenerTextoEdicto($xpath, $pagina); $count['edictos'] += 1;
		$count['expedientes'] = $this->obtenerExpedientesEdicto($xpath, $codEdicto);
		
		return $count;
	}
	
	private function obtenerSrcIframe($pagina) {
		$url = "https://sede.dgt.gob.es" . $pagina;
		$csfv = $this->obtenerCsfv($url); // Obtiene la variable com.sun.faces.VIEW

		$postdata = http_build_query(
		    array(
		        'dato:BusInput'		=> '_*', // Muestra todos los resultados
		        'criterioBusqueda' 	=> '1', // Búsqueda por expediente
		        'dato:js3' 			=> '',
		        'dato' 				=> 'dato',
		        'com.sun.faces.VIEW' => $csfv
		    )
		);
		
		$opts = array('http' =>
		    array(
		        'method'  => 'POST',
		        // 'header'  => 'Content-type: application/x-www-form-urlencoded',
		        'header'  => 'Content-type: application/x-www-form-urlencoded',
		        'content' => $postdata
		    )
		);
		
		$context = stream_context_create($opts);
		
		$data = file_get_contents($url, false, $context);

		$doc = new \DOMDocument();
		$doc->loadHTML($data);
		$xpath = new \DOMXPath($doc);
		
		$iframe = $xpath->query('//iframe[@id="capaHTML"]');
		
		return $iframe->item(0)->getAttribute('src');
	}
	
	private function obtenerTextoEdicto($xpath, $pagina) {
		$hoja = new Edicto();
		
		$num = $xpath->query('/html/body/table/tr/td[2]/table/tr[7]/td[2]/span');
		$hoja->setNumero($num->item(0)->nodeValue);

		$fecha = $xpath->query('/html/body/table/tr/td[2]/table/tr[7]/td[4]');
		$hoja->setFecha($fecha->item(0)->nodeValue);
		
        $membrete = $xpath->query('/html/body/table/tr/td[2]/table/tr[13]/td[2]');
        $hoja->setMembrete($membrete->item(0)->nodeValue);

        $entrada = $xpath->query('/html/body/table/tr/td[2]/table/tr[18]/td[2]/span');
        $hoja->setEntrada($entrada->item(0)->nodeValue);

        $texto = $xpath->query('/html/body/table/tr/td[2]/table/tr[20]/td[2]');
        $hoja->setTexto($texto->item(0)->nodeValue);
		
		$hoja->setEnlace($pagina);
		
		$em = $this->getDoctrine()->getEntityManager();
    	$em->persist($hoja);
    	$em->flush();
		
		return $hoja->getId();	
	}
		
	private function obtenerExpedientesEdicto($xpath, $idEdicto) {
		
		$exps = $xpath->query('/html/body/table/tr/td[2]/table/tr[24]');
		
		$edicto = $this->getDoctrine()->getRepository('BumexBasicBundle:Edicto')->find($idEdicto);
		
		$col40 = $xpath->query('//td[@colspan="40"]');
		$tope = $col40->item(9)->getNodePath();
		$tr = 25; // El 24 son las cabeceras de la tabla de expedientes. 
		$count = 0;
		
		// Bucle que obtiene la línea
		do {
			$vacio = 0;
			
			$multa = new Expediente();
			$multa->setEdicto($edicto);
			
			// Bucle que obtiene cada dato de la línea
			for ($td=2; $td <= 22; $td+=2) {
				$control = '/html/body/table/tr/td[2]/table/tr[' . $tr . ']/td';
				$cab = $xpath->query('/html/body/table/tr/td[2]/table/tr[' . $tr . ']/td[' . $td . ']');

				switch ($td) {
					case 2: 
						if(is_object($cab->item(0))) {
							$multa->setExpediente($cab->item(0)->textContent);
							$vacio++;
						} 
						break;
					case 4: 
						if(is_object($cab->item(0))) {
							$multa->setNombre($cab->item(0)->textContent);
							$vacio++;
						}
						break;
					case 6: 
						if(is_object($cab->item(0))) $multa->setNif($cab->item(0)->textContent);
						break;
					case 8: 
						if(is_object($cab->item(0))) $multa->setLocalidad($cab->item(0)->textContent);
						break;
					case 10: 
						if(is_object($cab->item(0))) $multa->setFecha($cab->item(0)->textContent);
						break;
					case 12: 
						if(is_object($cab->item(0))) $multa->setMatricula($cab->item(0)->textContent);
						break;
					case 14: 
						if(is_object($cab->item(0))) $multa->setEuros($cab->item(0)->textContent);
						break;
					case 16: 
						if(is_object($cab->item(0))) $multa->setPrecepto($cab->item(0)->textContent);
						break;
					case 18: 
						if(is_object($cab->item(0))) $multa->setArt($cab->item(0)->textContent);
						break;
					case 20: 
						if(is_object($cab->item(0))) $multa->setPuntos($cab->item(0)->textContent);
						break;
					case 22: 
						if(is_object($cab->item(0))) $multa->setReq($cab->item(0)->textContent);
						break;
				}
			}
			$tr++;
			
			if ($vacio == 2) {
				$em = $this->getDoctrine()->getEntityManager();
	    		$em->persist($multa);
	    		$em->flush();
				
				$count++;
			}
			
		} while ($control != $tope);
		
		return $count;
	}

	private function crearPdfCoincidencias(){
		$repositorio = $this->getDoctrine()->getRepository('BumexBasicBundle:Edicto');
		$edictos = $repositorio->findAll();
		foreach ($edictos as $edicto) {
			$directorio = $_SERVER['DOCUMENT_ROOT'] . '/bumex/app/cache/tmp/';
			$exps = $edicto->getExpedientes();
			$listaExp = array();
			foreach ($exps as $exp) {
				$n = 0;
				if($exp->getCoincidencia() == '1'){
					$listaExp[$n]['exp'] = $exp->getExpediente();
					$listaExp[$n]['nom'] = $exp->getNombre();
					$listaExp[$n]['nif'] = $exp->getNif();
					$listaExp[$n]['loc'] = $exp->getLocalidad();
					$listaExp[$n]['fec'] = $exp->getFecha();
					$listaExp[$n]['mat'] = $exp->getMatricula();
					$listaExp[$n]['eur'] = $exp->getEuros();
					$listaExp[$n]['pre'] = $exp->getPrecepto();
					$listaExp[$n]['art'] = $exp->getArt();
					$listaExp[$n]['pun'] = $exp->getPuntos();
					$listaExp[$n++]['req'] = $exp->getReq();
				}
			}
			
			if(count($listaExp) > 0){
				$directorio .= $edicto->getNumero() . " [" . date('dmyHis') . "]";
				$this->crearPdfEdicto($edicto, $directorio);
				$this->crearPdfExpedientes($listaExp, $directorio);
			}
		}
	}

	private function crearPdfEdicto($edicto, $directorio, $nombre = 'Edicto.pdf') {
		
		mkdir($directorio, 0777);
		
		$pdfObj = $this->get("white_october.tcpdf")->create();
		$pdfObj->addPage();
		$pdfObj->Write($h=0, $edicto->getNumero(), $link='', $fill=0, $align='L', $ln=true, $stretch=0, $firstline=false, $firstblock=false, $maxh=0);
		$pdfObj->Write($h=0, "Fecha de publicación: " . substr($edicto->getFecha(), 6), $link='', $fill=0, $align='L', $ln=true, $stretch=0, $firstline=false, $firstblock=false, $maxh=0);
		$pdfObj->Write($h=0, "Enlace de comprobación: https://sede.dgt.gob.es" . $edicto->getEnlace(), $link='', $fill=0, $align='L', $ln=true, $stretch=0, $firstline=false, $firstblock=false, $maxh=0);
		$pdfObj->Write($h=0, $edicto->getMembrete(), $link='', $fill=0, $align='L', $ln=true, $stretch=0, $firstline=false, $firstblock=false, $maxh=0);
		$pdfObj->Write($h=0, $edicto->getEntrada(), $link='', $fill=0, $align='L', $ln=true, $stretch=0, $firstline=false, $firstblock=false, $maxh=0);
		$pdfObj->Write($h=0, $edicto->getTexto(), $link='', $fill=0, $align='L', $ln=true, $stretch=0, $firstline=false, $firstblock=false, $maxh=0);
		$pdfObj->Output($directorio . "/" . $nombre, 'F');
		
		return TRUE; 
	}
 
	private function crearPdfExpedientes($exps, $directorio, $nombre = 'Listado_clientes.pdf') { 
		$pdfObj = $this->get("white_october.tcpdf")->create();
		$pdfObj->addPage('L');
		
		// Cabecera de la tabla de expedientes
		$tbl = 	'<table cellspacing="0" cellpadding="1" border="1">
					<tr>
					        <td>Expediente</td><td>Nombre</td><td>DNI/NIF</td><td>Localidad</td><td>Fecha</td>
					        <td>Matrícula</td><td>Euros</td><td>Precepto</td><td>Art.</td><td>Puntos</td><td>Req.</td>
					</tr>';
					
		for($i=0; $i < count($exps); $i++) {
			$tbl .= '<tr style="background-color: #FAFAFA">';
			$tbl .= '	<td>' . $exps[$i]['exp'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['nom'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['nif'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['loc'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['fec'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['mat'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['eur'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['pre'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['art'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['pun'] . '&nbsp;</td>';
			$tbl .= '	<td>' . $exps[$i]['req'] . '&nbsp;</td>';
			$tbl .= '</tr>';
		}
		
		$tbl .= '</table>';
		
		$pdfObj->writeHTML($tbl, true, false, false, false, '');		
		$pdfObj->Output($directorio . "/" . $nombre, 'F');
		
		return TRUE; 
	}

	private function obtenerTlfNoclientes(){
		$directorio = $_SERVER['DOCUMENT_ROOT'] . '/bumex/app/cache/tmp/';
		
		// $cifid = $this->obtenerCif();
		// $this->buscarTelefono($cifid);
		
		$this->crearPdfNoclientes($directorio);
	}
	
	private function crearPdfNoclientes($directorio, $nombre = 'Listado_telefonos.pdf'){
		
		$repositorio = $this->getDoctrine()->getRepository('BumexBasicBundle:Expediente');
		$query = $repositorio->createQueryBuilder('e')
								->select('e')
								->distinct('e.nif')
								->where('e.tlf IS NOT NULL')
	    						->orderBy('e.nif', 'ASC')
	    						->getQuery();

		$expaux = $query->getResult();

		$pdfObj = $this->get("white_october.tcpdf")->create();
		$pdfObj->addPage('L');
		
		// Cabecera de la tabla de expedientes
		$tbl = 	'<table cellspacing="0" cellpadding="1" border="1">
					<tr>
					        <td>Expediente</td><td>Nombre</td><td>DNI/NIF</td><td>Localidad</td><td>Fecha</td>
					        <td>Matrícula</td><td>Euros</td><td>Precepto</td><td>Art.</td><td>Puntos</td><td>Req.</td>
					</tr>';
		foreach($expaux as $exp){
			$tbl .= '<tr style="background-color: #FAFAFA">';
			$tbl .= '	<td>' . $exp->getExpediente() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getNombre() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getNif() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getLocalidad() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getFecha() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getMatricula() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getEuros() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getPrecepto() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getArt() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getPuntos() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getReq() . '&nbsp;</td>';
			$tbl .= '	<td>' . $exp->getTlf() . '&nbsp;</td>';
			$tbl .= '</tr>';
		}
		
		$tbl .= '</table>';
		
		$pdfObj->writeHTML($tbl, true, false, false, false, '');		
		$pdfObj->Output($directorio . "/" . $nombre, 'F');
		
		return TRUE; 
	}
	
	private function buscarTelefono($cifid){
		$existe = FALSE;
		foreach ($cifid as $c) {
			$existe = $this->realizarBusquedaAxesor($c);
			// if(!$existe) $existe = $this->realizarBusquedaPblancas($c);
		}
		
	}
	
	private function realizarBusquedaAxesor($cifid){
		$existe = FALSE;
			
		$data = file_get_contents('http://www.axesor.es/buscar/empresas?q=' . $cifid['nif']);
		$doc = new \DOMDocument();
		@$doc->loadHTML($data);
		$xpath = new \DOMXPath($doc);
		
		$input = $xpath->query('//span[@class="tel"]');
		if(is_object($input->item(0)))
			$existe = $this->registrarTelefono($input->item(0)->nodeValue, $cifid['id']);
		
		return $existe;
	}
	
	private function registrarTelefono($tlf, $id){
		$em = $this->getDoctrine()->getEntityManager();
	    $expediente = $em->getRepository('BumexBasicBundle:Expediente')->find($id);
	    $expediente->setTlf($tlf);
	    $em->flush();
		
		return TRUE;
	} 
	
	private function obtenerCif(){
		$repositorio = $this->getDoctrine()->getRepository('BumexBasicBundle:Expediente');

		/**
		 * TODO Corregir la consulta para adaptarle a DQL sin usar un bucle
		 */
		$letras = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'P', 'Q', 'R', 'S', 'U', 'V', 'N', 'W');
		$expedientes = array();
		$total = 0;
		foreach($letras as $l){
			$query = $repositorio->createQueryBuilder('e')
								->select('e.nif', 'e.id', 'e.nombre')
								->distinct('e.nif')
								->where('SUBSTRING(e.nif,1,1) = :letra AND e.tlf IS NULL')
								->setParameter('letra', $l)
	    						->orderBy('e.nif', 'ASC')
	    						->getQuery();
    						
			// echo $query->getDQL() . " con la " . $l . " ";
			$expaux = $query->getResult();
			foreach ($expaux as $exp) {
				$expedientes[] = $exp;				
			}
		}
		return $expedientes;
	}
}
